package synchronization;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.channels.Channels;
import java.nio.channels.ReadableByteChannel;
import java.util.Timer;
import java.util.TimerTask;
import java.util.Calendar;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

import org.json.JSONException;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.pama.SchwachstellenDetektorApplication;

public class Synchronization {

	public static void startTimer() {
		TimerTask task = new TimerTask() {
			@Override
			public void run() {

				// Herunterladen und Entpacken der Modifed-JSON
				downloadZip("modified");
				unZipFile("json_files/json_modified.zip", "json_files");

				// Einlesen der JSON Datei in die Datenbank
				try {
					SchwachstellenDetektorApplication.parseJSON("json_files/nvdcve-1.0-modified.json");
				} catch (JSONException | IOException e) {
					e.printStackTrace();
				}
			}
		};

		// Erstellen eines Timers von 2 Stunden für die Methode run zur Synchronisierung
		// der Datenbank
		Timer timer = new Timer();
		long delay = 0;
		long intervalPeriod = 7200000; // 2 Stunden
		timer.scheduleAtFixedRate(task, delay, intervalPeriod);

	}

	// method unZipFile modified from
	// https://stackoverflow.com/questions/25933211/java-unzip-program/25933908#25933908
	public static void unZipFile(String zipFile, String outputFolder) {

		byte[] buffer = new byte[1024];

		try {

			// create output directory is not exists
			File folder = new File(outputFolder);
			if (!folder.exists()) {
				folder.mkdir();
			}

			// get the zip file content
			ZipInputStream zis = new ZipInputStream(new FileInputStream(zipFile));
			// get the zipped file list entry
			ZipEntry ze = zis.getNextEntry();

			while (ze != null) {

				String fileName = ze.getName();
				File newFile = new File(outputFolder + File.separator + fileName);

				System.out.println("file unzip : " + newFile.getAbsoluteFile());

				// create all non exists folders
				// else you will hit FileNotFoundException for compressed folder
				new File(newFile.getParent()).mkdirs();

				FileOutputStream fos = new FileOutputStream(newFile);

				int len;
				while ((len = zis.read(buffer)) > 0) {
					fos.write(buffer, 0, len);
				}

				fos.close();
				ze = zis.getNextEntry();
			}

			zis.closeEntry();
			zis.close();

		} catch (IOException ex) {
			ex.printStackTrace();
		}

	}

	// method downloadZip modified from
	// https://stackoverflow.com/questions/921262/how-to-download-and-save-a-file-from-internet-using-java
	public static void downloadZip(String file) {

		URL website;
		try {
			String url = "https://nvd.nist.gov/feeds/json/cve/1.0/nvdcve-1.0-" + file + ".json.zip";
			System.out.println("downloading " + url);
			website = new URL(url);
			ReadableByteChannel rbc = Channels.newChannel(website.openStream());
			FileOutputStream fos = new FileOutputStream("json_files/json_" + file + ".zip");
			fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);

			System.out.println("Downloaded file");

		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	// Methode zum Aufsetzen der Datenbank
	public static void setupDatabase(Boolean button) throws JsonProcessingException, JSONException, IOException {

		int year = Calendar.getInstance().get(Calendar.YEAR) + 1; // aktuelles Jahr

		// prüfe, ob Methode durch Start der Anwendung oder klick auf Button ausgelsöst
		// wurde
		if (button) {
			// Methode wurde durch Button aufgerufen

			// Herunterladen und Entpacken der Modifed-JSON und Einlesen in die Datenbank
			downloadZip("modified");
			unZipFile("json_files/json_modified.zip", "json_files");
			SchwachstellenDetektorApplication.parseJSON("json_files/nvdcve-1.0-modified.json");
		} else {
			// Methode wurde Starten der Anwendung aufgerufen

			// prüfe für jedes Jahr, ob die JSON Datei des Jahres existiert und lese sie
			// ggfs. in die Datenbank ein
			for (int i = 2002; i < year; i++) {
				checkIfFileExists(Integer.toString(i));
				System.out.println("JsonFeed aus dem Jahr " + i + " erfolgreich in die Datenbank geladen");
			}
		}

	}

	// Methode zur Überprüfung, ob eine Datei existiert
	public static void checkIfFileExists(String file) throws JsonProcessingException, JSONException, IOException {

		// prüfe, ob die JSON Datei eines Jahres exisiert
		File f = new File("json_files/nvdcve-1.0-" + file + ".json");
		if (f.exists() && !f.isDirectory()) {
			// lies die vorhandene Datei ein
			SchwachstellenDetektorApplication.parseJSON("json_files/nvdcve-1.0-" + file + ".json");
		} else {
			// lade die fehlende Datei herunter und lies sie in die Datenbank ein
			downloadZip(file);
			unZipFile("json_files/json_" + file + ".zip", "json_files");
			SchwachstellenDetektorApplication.parseJSON("json_files/nvdcve-1.0-" + file + ".json");
		}

	}

}
