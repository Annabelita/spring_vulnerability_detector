/*
 * MongoTemplates
 */

package resource;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.stereotype.Service;

import document.Vulnerability;

@Service("VulnerabilityService")
public class VulnerabilityServiceImpl implements VulnerabilityService {

	private final MongoTemplate mongoTemplate;

	@Autowired
	public VulnerabilityServiceImpl(MongoTemplate mongoTemplate) {
		this.mongoTemplate = mongoTemplate;
	}

	// Speichern einer Schwachstelle
	@Override
	public Vulnerability saveVul(Vulnerability vul) {
		mongoTemplate.save(vul);
		return vul;
	}

	// Ausgabe aller Schwachstellen in einer Liste
	@Override
	public List<Vulnerability> getAllVuls() {
		return mongoTemplate.findAll(Vulnerability.class);
	}

	// Ausgeben einer Schwachstelle mit angefragtem vendor_name
	@Override
	public Vulnerability findOneByName(String name) {
		Query query = new Query();
		query.addCriteria(Criteria.where("vendor_name").is(name.toLowerCase()));
		return mongoTemplate.findOne(query, Vulnerability.class);
	}

	// Ausgeben aller Schwachstellen mit angefragtem vendor_name
	public List<Vulnerability> findAllByVendorName(String name) {
		Query query = new Query();
		query.addCriteria(Criteria.where("vendor_name").is(name.toLowerCase()));
		return mongoTemplate.find(query, Vulnerability.class);
	}

	// Updaten einer Schwachstelle
	@Override
	public Vulnerability updateOneVul(Vulnerability vul) {
		mongoTemplate.save(vul);
		return vul;
	}

	// Löschen einer Schwachstelle
	@Override
	public void deleteVul(Vulnerability vul) {
		mongoTemplate.remove(vul);

	}

	// Ausgeben aller Schwachstellen mit angefragtem product_name
	@Override
	public List<Vulnerability> findAllByProductName(String name) {
		Query query = new Query();
		query.addCriteria(Criteria.where("product_name").is(name.toLowerCase()));
		return mongoTemplate.find(query, Vulnerability.class);
	}

	// Ausgeben aller Schwachstellen mit angefragtem Änderungsdatum
	@Override
	public List<Vulnerability> findAllByLastModified(String string) {
		Query query = new Query();
		query.addCriteria(Criteria.where("lastModified").is(string));
		return mongoTemplate.find(query, Vulnerability.class);
	}

	// Ausgeben aller Schwachstellen mit angefragtem Veröffentlichungsdatum
	@Override
	public List<Vulnerability> findAllByPublishedDate(String string) {
		Query query = new Query();
		query.addCriteria(Criteria.where("publishDate").is(string));
		return mongoTemplate.find(query, Vulnerability.class);
	}

	// Ausgeben einer Schwachstelle mit angefragter ID
	@Override
	public Vulnerability findOneById(String id) {
		Query query = new Query();
		query.addCriteria(Criteria.where("id").is(id));
		return mongoTemplate.findOne(query, Vulnerability.class);
	}

	// Ausgeben aller Schwachstellen mit angefragter ID
	@Override
	public List<Vulnerability> findAllById(String string) {
		Query query = new Query();
		query.addCriteria(Criteria.where("id").is(string));
		return mongoTemplate.find(query, Vulnerability.class);
	}

}
